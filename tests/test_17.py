import advent_of_code.puzzle_17 as p17
from nose.tools import assert_equal, assert_true, assert_false
import os


sample_input = """x=495, y=2..7
y=7, x=495..501
x=501, y=3..7
x=498, y=2..4
x=506, y=1..2
x=498, y=10..13
x=504, y=10..13
y=13, x=498..504"""
sample_topo = [[".", ".", ".", ".", ".", ".", "+", ".", ".", ".", ".", ".", ".", "."],
               [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
               [".", "#", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", "#", "."],
               [".", "#", ".", ".", "#", ".", ".", "#", ".", ".", ".", ".", ".", "."],
               [".", "#", ".", ".", "#", ".", ".", "#", ".", ".", ".", ".", ".", "."],
               [".", "#", ".", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
               [".", "#", ".", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
               [".", "#", "#", "#", "#", "#", "#", "#", ".", ".", ".", ".", ".", "."],
               [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
               [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
               [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "#", ".", ".", "."],
               [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "#", ".", ".", "."],
               [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "#", ".", ".", "."],
               [".", ".", ".", ".", "#", "#", "#", "#", "#", "#", "#", ".", ".", "."]]
sample_topo_complete = [[".", ".", ".", ".", ".", ".", "+", ".", ".", ".", ".", ".", ".", "."],
               [".", ".", ".", ".", ".", ".", "|", ".", ".", ".", ".", ".", "#", "."],
               [".", "#", ".", ".", "#", "|", "|", "|", "|", ".", ".", ".", "#", "."],
               [".", "#", ".", ".", "#", "~", "~", "#", "|", ".", ".", ".", ".", "."],
               [".", "#", ".", ".", "#", "~", "~", "#", "|", ".", ".", ".", ".", "."],
               [".", "#", "~", "~", "~", "~", "~", "#", "|", ".", ".", ".", ".", "."],
               [".", "#", "~", "~", "~", "~", "~", "#", "|", ".", ".", ".", ".", "."],
               [".", "#", "#", "#", "#", "#", "#", "#", "|", ".", ".", ".", ".", "."],
               [".", ".", ".", ".", ".", ".", ".", ".", "|", ".", ".", ".", ".", "."],
               [".", ".", ".", "|", "|", "|", "|", "|", "|", "|", "|", "|", ".", "."],
               [".", ".", ".", "|", "#", "~", "~", "~", "~", "~", "#", "|", ".", "."],
               [".", ".", ".", "|", "#", "~", "~", "~", "~", "~", "#", "|", ".", "."],
               [".", ".", ".", "|", "#", "~", "~", "~", "~", "~", "#", "|", ".", "."],
               [".", ".", ".", "|", "#", "#", "#", "#", "#", "#", "#", "|", ".", "."]]


def test_parse_input():
    x_offset, topo = p17.parse_input(sample_input)
    assert_equal(x_offset, 494, "Wrong offset")
    for y in range(len(sample_topo)):
        assert_equal(topo[y], sample_topo[y], f"Wrong topografy on y={y}")
